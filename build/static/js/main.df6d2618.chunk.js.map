{"version":3,"sources":["components/ProblemsViewer/ProblemsViewer.module.sass","components/Settings/Settings.module.sass","components/ProblemsViewer/Problem.module.sass","components/Keyboard/src/layouts/CyrillicNumbersLayout.js","utils/classNamesConcatenator.js","components/Settings/Settings.js","components/ProblemsViewer/Problem.js","utils/convertNumbersToCyrillicNotation.js","components/ProblemsViewer/problemsGenerator.js","components/ProblemsViewer/ProblemsViewer.js","constantsAndDefaults.js","components/Keyboard/src/KeyboardButton.js","components/Keyboard/src/layouts/LatinLayout.js","components/Keyboard/src/layouts/SymbolsLayout.js","components/Keyboard/src/layouts/NumericLayout.js","components/Keyboard/src/icons/BackspaceIcon.js","components/Keyboard/src/icons/LanguageIcon.js","components/Keyboard/src/icons/ShiftIcon.js","components/Keyboard/src/Keyboard.js","components/Keyboard/src/layouts/CyrillicLayout.js","components/Keyboard/CyrillicNumbersKeyboard.js","App.js","utils/isAppVersionLess.js","serviceWorker.js","index.js"],"names":["module","exports","Object","defineProperty","value","default","symbolsKeyValue","layout","join","call","arguments","SettingsButton","currentColorTheme","localAppSettings","isColorThemeDark","className","cn","s","settingsButton","type","data-toggle","data-target","aria-expanded","aria-controls","onClick","e","collapseBlock","document","getElementById","target","closest","dataset","classList","contains","remove","setAttribute","add","src","alt","settingsIcon","aria-hidden","settingsCaption","Settings","setLocalAppSettings","handleSettingChanges","name","checked","changes","useDecimalFractions","useCommonFractions","displayNumbersInCyrillicNotation","changeFontSize","preventDefault","problemsTextSize","textContent","settings","id","useAddition","onChange","htmlFor","role","useSubtraction","useMultiplication","useDivision","disabled","aria-disabled","minOperandValue","maxOperandValue","numberOfProblemsPerPage","onBlur","showAnswerOnHover","inputsForTestAnswer","shortInput","readOnly","Problem","problem","checkAnswer","setOSK","useState","answerFieldValue","setAnswerFieldValue","inputNode","setInputNode","Math","random","answerField","inputMode","pattern","answer","toString","replace","onInput","onFocus","event","showOSK","ref","thisInput","useEffect","answerLine","showRightAnswer","rightAnswer","number","result","integer","fractional","numberParts","trunc","parseInt","slice","expandNumber","abs","sign","num","k","till","ceil","length","cyrillic","chunk","i","mapToCyrillicNumber","padEnd","tail","repeat","defaultGeneratorOptions","quantity","useOperations","inCyrillicNotation","problemsGenerator","options","isNaN","q","problemsList","Array","getRandomIntInclusive","min","max","floor","getRandomNumber","newOperand","operand","toFixed","generateProblem","operations","keys","map","key","operationIndex","filter","el","index","getRandomOperation","op1","op2","toCyrillicNotation","split","ProblemsViewer","btnColorTheme","problemsOptions","toggleChekAnswer","genProblemsList","style","fontSize","flexContainer","flexItem","paddingBottom","marginTop","defaultAppSettings","groupByOperations","appVersion","KeyboardButton","handleClick","props","this","classes","isDisabled","autoFocus","autofocus","PureComponent","defaultProps","BackspaceIcon","viewBox","width","height","fill","d","LanguageIcon","ShiftIcon","numbers","Keyboard","state","currentLayout","showSymbols","uppercase","isUppercase","handleLanguageClick","setState","layouts","focus","handleShiftClick","handleSymbolsClick","handleLetterButtonClick","selectionStart","selectionEnd","nextValue","substring","setTimeout","setSelectionRange","dispatchEvent","Event","bubbles","handleBackspaceClick","nextSelectionPosition","isFirstLetterUppercase","keysSet","SymbolsLayout","keyRow","toUpperCase","getKeys","row","button","getSymbolsKeyValue","NumericLayout","leftButtons","rightButtons","renderKeyRows","isNumeric","renderNumeric","renderAlphanumeric","CyrillicNumbersKeyboard","CyrillicNumbersLayout","stopPropagation","isCyrillicNumbers","renderCyrillicNumber","App","versionFromStore","versionFromDefaults","JSON","parse","localStorage","getItem","setItem","stringify","OSK","evt","tagName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.df6d2618.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"flexContainer\":\"ProblemsViewer_flexContainer__1qPJ1\",\"flexItem\":\"ProblemsViewer_flexItem__3RlSo\",\"paddingBottom\":\"ProblemsViewer_paddingBottom__1_gqW\",\"marginTop\":\"ProblemsViewer_marginTop__2tj6e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__2NtNj\",\"shortInput\":\"Settings_shortInput__1VxrG\",\"settingsButton\":\"Settings_settingsButton__15pWL\",\"settingsIcon\":\"Settings_settingsIcon__1Amhr\",\"settingsCaption\":\"Settings_settingsCaption__1DSct\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"answerField\":\"Problem_answerField__15144\",\"answerLine\":\"Problem_answerLine__1LhKr\",\"showRightAnswer\":\"Problem_showRightAnswer__2PpDk\",\"rightAnswer\":\"Problem_rightAnswer__f5Fbh\"};","'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = {\r\n  symbolsKeyValue: '҃А҃В҃Г',\r\n  layout: [['А', 'В', 'Г', 'Д', 'Є', 'Ѕ', 'Ꙁ', 'И', 'Ѳ', '-'], ['І', 'К', 'Л', 'М', 'Н', 'Ѯ', 'О', 'П', 'Ч'], ['Р', 'С', 'Т', 'У', 'Ф', 'Х', 'Ѱ', 'Ѿ', 'Ц']]\r\n};\r\n","export default function ()  {\r\n  return [].join.call(arguments, ' ')\r\n}","import React from \"react\";\r\nimport s from './Settings.module.sass'\r\nimport cn from '../../utils/classNamesConcatenator.js'\r\n\r\nexport const SettingsButton = ({localAppSettings}) => {\r\n  let currentColorTheme = localAppSettings.isColorThemeDark ? 'bg-dark text-info' : 'bg-light text-dark'\r\n\r\n  const handleSettingsClick = (e) => {\r\n    //  как-то оно на одних классах из коробки не работает, а подключать ЖС код от бутстрапа ради одной функции не охота (тем более что он сам не подключился а разбираться влом)\r\n    const collapseBlock = document.getElementById(e.target.closest('.btn').dataset.target)\r\n\r\n    if (collapseBlock.classList.contains('show')) {\r\n      collapseBlock.classList.remove('show')\r\n      e.target.setAttribute('aria-expanded', 'false')\r\n    }\r\n    else {\r\n      collapseBlock.classList.add('show')\r\n      e.target.setAttribute('aria-expanded', 'true')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <button\r\n      className={cn('btn',  s.settingsButton, currentColorTheme)}\r\n      type=\"button\"\r\n      data-toggle=\"collapse\"\r\n      data-target=\"settingsForm\"\r\n      aria-expanded=\"false\"\r\n      aria-controls=\"settingsForm\"\r\n      onClick={handleSettingsClick}\r\n    >\r\n      <img src=\"./settings-icons8.svg\" alt=\"settings icon\" className={s.settingsIcon} aria-hidden/>\r\n      <span className={s.settingsCaption}>Настройки</span>\r\n    </button>\r\n  )\r\n}\r\n\r\nexport const Settings = ({localAppSettings, setLocalAppSettings}) => {\r\n\r\n  let currentColorTheme = localAppSettings.isColorThemeDark ? 'bg-dark text-info' : 'bg-light text-dark'\r\n\r\n  function handleSettingChanges(e) {\r\n    let name = e.target.name\r\n    let value = e.target.type === 'checkbox' ? e.target.checked : e.target.value\r\n    let changes = {}\r\n\r\n    changes[name] = value\r\n\r\n    if (name === 'displayNumbersInCyrillicNotation'){\r\n      changes.useDecimalFractions = false\r\n      changes.useCommonFractions = false\r\n    }\r\n\r\n    if (name === 'useDecimalFractions'){\r\n      changes.useCommonFractions = false\r\n      changes.displayNumbersInCyrillicNotation = false\r\n    }\r\n\r\n    if (name === 'useCommonFractions'){\r\n      changes.useDecimalFractions = false\r\n      changes.displayNumbersInCyrillicNotation = false\r\n    }\r\n\r\n\r\n    setLocalAppSettings({\r\n      ...localAppSettings\r\n      , ...changes\r\n    })\r\n\r\n  }\r\n\r\n  function changeFontSize(e) {\r\n    e.preventDefault()\r\n\r\n    let value = localAppSettings.problemsTextSize\r\n\r\n    if (e.target.textContent === '+' && value < 5) {\r\n      value++\r\n    }\r\n    if (e.target.textContent === '-' && value > 1) {\r\n      value--\r\n    }\r\n\r\n    // чтоб не было лишних вызовов при неизменном значении\r\n    if (value !== localAppSettings.problemsTextSize) {\r\n      // кажись бред, но делает что надо\r\n      handleSettingChanges({target: {type: 'text', name: 'problemsTextSize', value }})\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  // in React onChange and onInput are the same, so I do this onBlur\r\n  const fixInputedChanges = (e) => {\r\n    const name = e.target.name\r\n    let value = e.target.value\r\n\r\n    if (name === 'numberOfProblemsPerPage' && value > 100){\r\n      value = 100\r\n    }\r\n    else if (name === 'numberOfProblemsPerPage' && value < 5){\r\n      value = 5\r\n    }\r\n    handleSettingChanges({target: {type: 'number', name, value }})\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={cn(s.settings, currentColorTheme)}>\r\n\r\n      <form id='settingsForm' className='collapse '>\r\n        <div className='form-row'>\r\n          <div className=\"col-md-6 \">\r\n\r\n            <div className=\"form-group\">\r\n\r\n              <fieldset>\r\n                <legend>Использовать операции</legend>\r\n\r\n                <div className='form-row'>\r\n\r\n                  <div className='col'>\r\n                    <div className=\"custom-control custom-checkbox\">\r\n                      <input id='useAddition' className='custom-control-input' type=\"checkbox\" name='useAddition'\r\n                             checked={localAppSettings.useAddition || ''} onChange={handleSettingChanges}/>\r\n                      <label className=\"custom-control-label\" htmlFor='useAddition'\r\n                             role='button'>Сложение&nbsp;+ </label>\r\n                    </div>\r\n\r\n                    <div className=\"custom-control custom-checkbox\">\r\n                      <input id='useSubtraction' className='custom-control-input' type=\"checkbox\" name='useSubtraction'\r\n                             checked={localAppSettings.useSubtraction || ''} onChange={handleSettingChanges}/>\r\n                      <label className=\"custom-control-label\" htmlFor='useSubtraction'\r\n                             role='button'>Вычитание&nbsp;- </label>\r\n                    </div>\r\n\r\n                  </div>\r\n\r\n\r\n                  <div className='col'>\r\n\r\n                    <div className=\"custom-control custom-checkbox\">\r\n                      <input id='useMultiplication' className='custom-control-input' type=\"checkbox\"\r\n                             name='useMultiplication' checked={localAppSettings.useMultiplication || ''}\r\n                             onChange={handleSettingChanges}/>\r\n                      <label className=\"custom-control-label\" htmlFor='useMultiplication'\r\n                             role='button'>Умножение&nbsp;× </label>\r\n                    </div>\r\n\r\n                    <div className=\"custom-control custom-checkbox\">\r\n                      <input id='useDivision' className='custom-control-input' type=\"checkbox\" name='useDivision'\r\n                             checked={localAppSettings.useDivision || ''} onChange={handleSettingChanges}/>\r\n                      <label className=\"custom-control-label\" htmlFor='useDivision'\r\n                             role='button'>Деление&nbsp;÷ </label>\r\n                    </div>\r\n\r\n                  </div>\r\n                </div>\r\n\r\n                {/*<div className=\"custom-control custom-checkbox\">*/}\r\n                {/*  <input id='groupByOperations' className='custom-control-input' type=\"checkbox\"*/}\r\n                {/*         name='groupByOperations' disabled aria-disabled*/}\r\n                {/*         checked={localAppSettings.groupByOperations || ''}*/}\r\n                {/*         onChange={handleSettingChanges}/>*/}\r\n                {/*  <label className=\"custom-control-label\" htmlFor='checkboxDiv' role='button'>Группировать примеры по*/}\r\n                {/*    операциям</label>*/}\r\n                {/*</div>*/}\r\n\r\n              </fieldset>\r\n\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n\r\n\r\n              <fieldset>\r\n                <legend>Типы операндов</legend>\r\n\r\n                <div className=\"form-row\">\r\n\r\n                  <div className=\"col\">\r\n                    <div className=\"custom-control custom-checkbox\">\r\n                      <input type=\"checkbox\" id='useDecimalFractions' className='custom-control-input'\r\n                             name='useDecimalFractions' checked={localAppSettings.useDecimalFractions || ''}\r\n                             onChange={handleSettingChanges}/>\r\n                      <label htmlFor=\"useDecimalFractions\" className='custom-control-label' role='button'>Десятичные\r\n                        дроби</label>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col\">\r\n                    <div className=\"custom-control custom-checkbox\">\r\n                      <input type=\"checkbox\" id='useCommonFractions' className='custom-control-input' disabled\r\n                             aria-disabled name='useCommonFractions' checked={localAppSettings.useCommonFractions || ''}\r\n                             onChange={handleSettingChanges}/>\r\n                      <label htmlFor=\"useCommonFractions\" className='custom-control-label' role='button'>Обычные\r\n                        дроби</label>\r\n                    </div>\r\n                  </div>\r\n\r\n                </div>\r\n\r\n              </fieldset>\r\n\r\n              <fieldset>\r\n                <legend>Граничные значения операндов</legend>\r\n\r\n                <div className='form-row'>\r\n\r\n                  <div className=\"col\">\r\n                    <label htmlFor=\"minOperandValue\">Минимум</label>\r\n                    <input type=\"number\" className={cn(currentColorTheme, 'short-number-field')} id='minOperandValue' name='minOperandValue'\r\n                           value={localAppSettings.minOperandValue} onChange={handleSettingChanges}/>\r\n                  </div>\r\n\r\n                  <div className=\"col\">\r\n                    <label htmlFor=\"maxOperandValue\">Максимум</label>\r\n                    <input type=\"number\" className={cn(currentColorTheme, 'short-number-field')} id='maxOperandValue' name='maxOperandValue'\r\n                           value={localAppSettings.maxOperandValue} onChange={handleSettingChanges}/>\r\n                  </div>\r\n\r\n                </div>\r\n\r\n              </fieldset>\r\n\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <fieldset>\r\n                <legend> Количество примеров на странице </legend>\r\n\r\n                {/*<label htmlFor=\"numberOfProblemsPerPage\"> Количество примеров на странице </label>*/}\r\n                <input type=\"number\" id='numberOfProblemsPerPage' name='numberOfProblemsPerPage'\r\n                       className={cn(currentColorTheme, 'short-number-field')} value={localAppSettings.numberOfProblemsPerPage}\r\n                       onChange={handleSettingChanges} onBlur={fixInputedChanges}/>\r\n\r\n\r\n              </fieldset>\r\n            </div>\r\n\r\n          </div>\r\n\r\n\r\n          <div className=\"col-md-6\">\r\n\r\n            <div className=\"form-group\">\r\n              <fieldset>\r\n                <legend>Вариант проверки решений</legend>\r\n\r\n                <div className=\"custom-control custom-checkbox\">\r\n                  <input type=\"checkbox\" id='showAnswerOnHover' checked={localAppSettings.showAnswerOnHover || ''} className='custom-control-input'\r\n                         name='showAnswerOnHover' onChange={handleSettingChanges}/>\r\n                  <label htmlFor=\"showAnswerOnHover\" className='custom-control-label' role='button'>Показывать ответы\r\n                    при наведении</label>\r\n                </div>\r\n\r\n                <div className=\"custom-control custom-checkbox\">\r\n                  <input type=\"checkbox\" id='inputsForTestAnswer' checked={localAppSettings.inputsForTestAnswer || ''}\r\n                         className='custom-control-input' name='inputsForTestAnswer' onChange={handleSettingChanges}/>\r\n                  <label htmlFor=\"inputsForTestAnswer\" className='custom-control-label' role='button'>Показывать поля\r\n                    для ввода ответа</label>\r\n                </div>\r\n\r\n\r\n              </fieldset>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <fieldset>\r\n                <legend>Размер текста примеров</legend>\r\n\r\n                <div className=\"input-group\">\r\n                  <input type=\"text\" className={cn('form-control', s.shortInput, currentColorTheme)} readOnly id='problemsTextSize'\r\n                         value={localAppSettings.problemsTextSize} onChange={handleSettingChanges}/>\r\n                  <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-outline-secondary\" onClick={changeFontSize}>-</button>\r\n                    <button className=\"btn btn-outline-secondary\" onClick={changeFontSize}>+</button>\r\n                  </div>\r\n                </div>\r\n\r\n              </fieldset>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <fieldset>\r\n                <legend>Прочее</legend>\r\n\r\n                <div className=\"custom-control custom-checkbox\">\r\n                  <input type=\"checkbox\" id='isColorThemeDark' className='custom-control-input'\r\n                         name='isColorThemeDark' checked={localAppSettings.isColorThemeDark}\r\n                         onChange={handleSettingChanges}/>\r\n                  <label htmlFor=\"isColorThemeDark\" className='custom-control-label' role='button'>Тёмная тема</label>\r\n                </div>\r\n\r\n\r\n                <div className=\"custom-control custom-checkbox\">\r\n                  <input type=\"checkbox\" id='displayNumbersInCyrillicNotation'\r\n                         className='custom-control-input'\r\n                         name='displayNumbersInCyrillicNotation'\r\n                         checked={localAppSettings.displayNumbersInCyrillicNotation} onChange={handleSettingChanges}/>\r\n                  <label htmlFor=\"displayNumbersInCyrillicNotation\" className='custom-control-label' role='button'>Отображать\r\n                    числа кириллицей</label>\r\n                </div>\r\n              </fieldset>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport s from './Problem.module.sass'\r\nimport cn from \"../../utils/classNamesConcatenator\";\r\n\r\n\r\nexport const Problem = ({localAppSettings, classList, problem, checkAnswer, setOSK}) => {\r\n\r\n  /// STYLES ///\r\n  let currentColorTheme = localAppSettings.isColorThemeDark ? 'bg-dark text-info' : 'bg-light text-dark'\r\n\r\n  /// VARIABLES ///\r\n  const [answerFieldValue, setAnswerFieldValue] = useState('')\r\n  const [inputNode, setInputNode] = useState(null)\r\n\r\n  const id = Math.random()\r\n\r\n  const answerField = (\r\n      <input\r\n        id={id}\r\n        type={'text'}\r\n        inputMode={localAppSettings.displayNumbersInCyrillicNotation ? 'none' : 'decimal'}\r\n        className={cn(s.answerField, currentColorTheme)}\r\n        pattern={checkAnswer ? `^${problem.answer.toString().replace('.', '[.,]')}$` : null}\r\n        value={answerFieldValue}\r\n        onChange={(e)=> setAnswerFieldValue(e.target.value) }\r\n        onInput={(e) => setAnswerFieldValue(e.target.value)}\r\n        onFocus={event =>  {setOSK({inputNode, showOSK: true}) }}\r\n        ref={thisInput => setInputNode(thisInput)}\r\n      />)\r\n\r\n  useEffect(() => {\r\n    // clear input value when receive new problem\r\n    setAnswerFieldValue('')\r\n  }, [problem.answer])\r\n\r\n\r\n  /// PAYLOAD ///\r\n\r\n  return (\r\n    <div className={classList} >\r\n      <label className={s.answerLine}>\r\n        <span>{problem.problem}</span>\r\n        <span className={localAppSettings.showAnswerOnHover ? s.showRightAnswer : s.rightAnswer} >{problem.answer}</span>\r\n        {localAppSettings.inputsForTestAnswer ? answerField : ''}\r\n      </label>\r\n    </div>\r\n  )\r\n\r\n}","/** Function convert numbers to Cyrillic notation\r\n * @param {Number} number - some number to convert into cyrillic notation (max 999_999_999 because of additional symbols that need to mark larger order of magnitude have not aesthetic view in standard types)\r\n * @return {String | Number} - converted string or NaN\r\n */\r\nexport default function (number) {\r\n\r\n\r\n  let result = {integer: '', fractional: ''}\r\n\r\n  let numberParts = {integer: Math.trunc(number), fractional: parseInt((number % 1).toString().slice(2, 5))}\r\n\r\n  result.integer = expandNumber(numberParts.integer)\r\n\r\n  // it  need to check how show fractional in cyrillic notation\r\n  // result.fractional = expandNumber(numberParts.fractional)\r\n\r\n  return result.integer\r\n}\r\n\r\n\r\n/**\r\n * Function slice Number to groups by 3 digit and map each to cyrillic number\r\n * @param {Number | String} number\r\n * @return {String} - number in cyrillic notation or 'NaN'\r\n */\r\nconst expandNumber = (number) => {\r\n  if (Math.abs(parseInt(number))  >= 1000000000) {\r\n    return 'NaN'\r\n  }\r\n\r\n  let result = ''\r\n  let sign = (number < 0 ? '-' : '')\r\n\r\n  let num = Math.abs(number).toString()\r\n\r\n  // for each chunk of 3 digit (from right to left)\r\n  for (let k = 0, till = Math.ceil(num.length / 3); k < till; k++) {\r\n\r\n    let cyrillic = ''\r\n\r\n    // get last (max 3) symbols\r\n    let chunk = num.slice(-3)\r\n\r\n    // map hundreds, dozens, ones to cyrillic symbols\r\n    for (let i = 0; i < chunk.length; i++) {\r\n      cyrillic += mapToCyrillicNumber(chunk[i].padEnd(chunk.length - i, '0'))\r\n    }\r\n\r\n    let tail = parseInt(chunk.slice(-2))\r\n    if (tail > 10 && tail < 20) {\r\n      // swap last symbols because in cyrillic notation for numbers > 10 and < 20 it writes like pronounce - ones first, tens after\r\n      cyrillic = cyrillic.slice(0, -2) + cyrillic.slice(-1) + cyrillic.slice(-2, -1)\r\n    }\r\n\r\n    // drop used chunk\r\n    num = num.slice(0, -3)\r\n\r\n    //update result, insert zero, one or two marks of thousand\r\n    result = '҂'.repeat(k) + cyrillic + result\r\n  }\r\n\r\n  return sign + result\r\n}\r\n\r\n/**\r\n * Function map numbers to cyrillic notation\r\n * @param {String | Number} number\r\n * @return {String}\r\n */\r\nconst mapToCyrillicNumber = (number) => {\r\n  let result = ''\r\n  switch (number.toString()) {\r\n    case '1':\r\n      result += 'А'\r\n      break\r\n    case '2':\r\n      result += 'В'\r\n      break\r\n    case '3':\r\n      result += 'Г'\r\n      break\r\n    case '4':\r\n      result += 'Д'\r\n      break\r\n    case '5':\r\n      result += 'Є'\r\n      break\r\n    case '6':\r\n      result += 'Ѕ'\r\n      break\r\n    case '7':\r\n      result += 'Ꙁ'\r\n      break\r\n    case '8':\r\n      result += 'И'\r\n      break\r\n    case '9':\r\n      result += 'Ѳ'\r\n      break\r\n    case '10':\r\n      result += 'І'\r\n      break\r\n    case '11':\r\n      result += 'АІ'\r\n      break\r\n    case '12':\r\n      result += 'ВІ'\r\n      break\r\n    case '13':\r\n      result += 'ГІ'\r\n      break\r\n    case '14':\r\n      result += 'ДІ'\r\n      break\r\n    case '15':\r\n      result += 'ЄІ'\r\n      break\r\n    case '16':\r\n      result += 'ЅІ'\r\n      break\r\n    case '17':\r\n      result += 'ꙀІ'\r\n      break\r\n    case '18':\r\n      result += 'ИІ'\r\n      break\r\n    case '19':\r\n      result += 'ѲІ'\r\n      break\r\n    case '20':\r\n      result += 'К'\r\n      break\r\n    case '30':\r\n      result += 'Л'\r\n      break\r\n    case '40':\r\n      result += 'М'\r\n      break\r\n    case '50':\r\n      result += 'Н'\r\n      break\r\n    case '60':\r\n      result += 'Ѯ'\r\n      break\r\n    case '70':\r\n      result += 'О'\r\n      break\r\n    case '80':\r\n      result += 'П'\r\n      break\r\n    case '90':\r\n      result += 'Ч'\r\n      break\r\n    case '100':\r\n      result += 'Р'\r\n      break\r\n    case '200':\r\n      result += 'С'\r\n      break\r\n    case '300':\r\n      result += 'Т'\r\n      break\r\n    case '400':\r\n      result += 'У'\r\n      break\r\n    case '500':\r\n      result += 'Ф'\r\n      break\r\n    case '600':\r\n      result += 'Х'\r\n      break\r\n    case '700':\r\n      result += 'Ѱ'\r\n      break\r\n    case '800':\r\n      result += 'Ѿ'\r\n      break\r\n    case '900':\r\n      result += 'Ц'\r\n      break\r\n    case '0':\r\n    default:\r\n      result += ''\r\n  }\r\n\r\n  return result\r\n}\r\n","import toCyrillicNotation from \"../../utils/convertNumbersToCyrillicNotation\";\r\n\r\nconst defaultGeneratorOptions = {\r\n  quantity             : 5\r\n  , minOperandValue    : 0\r\n  , maxOperandValue    : 10\r\n  , useDecimalFractions: false\r\n  , useCommonFractions : false\r\n  , useOperations      : {\r\n      useAddition      : true\r\n    , useSubtraction   : false\r\n    , useMultiplication: false\r\n    , useDivision      : false\r\n  }\r\n  , inCyrillicNotation : false\r\n}\r\n/**\r\n * Generate some quantity arithmetic problems\r\n * @param {Object} options\r\n * @param {number} options.quantity\r\n * @param {number} options.minOperandValue\r\n * @param {number} options.maxOperandValue\r\n * @param {Boolean} options.useDecimalFractions\r\n * @param {Boolean} options.useCommonFractions\r\n * @param {Boolean} options.inCyrillicNotation\r\n * @param {Object} options.useOperations\r\n * @param {Boolean} options.useOperations.useAddition\r\n * @param {Boolean} options.useOperations.useSubtraction\r\n * @param {Boolean} options.useOperations.useMultiplication\r\n * @param {Boolean} options.useOperations.useDivision\r\n *\r\n * @return {Object[]} problems - Array of problems\r\n *         {String} problems[].problem - condition of problem\r\n *         {Number} problems[].answer - calculated value of problem\r\n */\r\nexport const problemsGenerator = (options = defaultGeneratorOptions) => {\r\n  /// Check Input ///\r\n  options.quantity = parseInt(options.quantity)\r\n  if (isNaN(options.quantity) || options.quantity < 1) {\r\n    options.quantity = defaultGeneratorOptions.quantity\r\n  }\r\n\r\n  options.minOperandValue = parseInt(options.minOperandValue)\r\n  if (isNaN(options.minOperandValue)) {\r\n    options.minOperandValue = defaultGeneratorOptions.minOperandValue\r\n  }\r\n\r\n  options.maxOperandValue = parseInt(options.maxOperandValue)\r\n  if (isNaN(options.maxOperandValue)) {\r\n    options.maxOperandValue = defaultGeneratorOptions.maxOperandValue\r\n  }\r\n\r\n  if (options.minOperandValue === 0 && options.maxOperandValue === 0) {\r\n    options.maxOperandValue++\r\n  }\r\n\r\n  /// VARIABLES ///\r\n  let q = options.quantity\r\n  let problemsList = new Array(q)\r\n\r\n  /// region SECONDARY FUNCTIONS ///\r\n  const getRandomIntInclusive = (min, max) => {\r\n    if (min > max) {\r\n      [min, max] = [max, min] // swap values\r\n    }\r\n\r\n    return Math.floor(Math.random() * (max - min + 1)) + min; //Максимум и минимум включаются\r\n  }\r\n\r\n  const getRandomNumber = (min, max) => {\r\n    if (min > max) {\r\n      [min, max] = [max, min] // swap values\r\n    }\r\n\r\n    return Math.random() * (max - min) + min\r\n  }\r\n\r\n  const newOperand = () => {\r\n    let operand = 0\r\n\r\n    // the operand must be not zero\r\n    while (operand === 0) {\r\n      if (options.useDecimalFractions && !options.useCommonFractions) {\r\n        operand = getRandomNumber(options.minOperandValue, options.maxOperandValue)\r\n      } else if (!options.useDecimalFractions && options.useCommonFractions) {\r\n\r\n      } else if (options.useDecimalFractions && options.useCommonFractions) {\r\n\r\n      } else {\r\n        operand = getRandomIntInclusive(options.minOperandValue, options.maxOperandValue)\r\n      }\r\n    }\r\n\r\n    operand = +(operand.toFixed(3).replace(/\\.?0+$/, ''))\r\n\r\n    return operand\r\n  }\r\n\r\n  const generateProblem = () => {\r\n    const operations = Object.keys(options.useOperations).map(key => options.useOperations[key])\r\n\r\n    const getRandomOperation = () => {\r\n      if (operations.filter(el => el).length < 1) {\r\n        return 'NoEnabledOperations'\r\n      }\r\n\r\n      let index\r\n\r\n      while (1) {\r\n        index = getRandomIntInclusive(0, operations.length - 1)\r\n        if (operations[index]) {\r\n          return index\r\n        }\r\n      }\r\n    }\r\n\r\n    let operationIndex = getRandomOperation()\r\n\r\n    let problem = {\r\n      problem : null\r\n      , answer: null\r\n      , op1   : newOperand()\r\n      , op2   : newOperand()\r\n    }\r\n\r\n    switch (operationIndex) {\r\n      case 1:\r\n        problem.answer = problem.op1 - problem.op2\r\n        problem.problem = problem.op1 + ' - ' + problem.op2 + ' = '\r\n        break\r\n      case 2:\r\n        problem.answer = problem.op1 * problem.op2\r\n        problem.problem = problem.op1 + ' * ' + problem.op2 + ' = '\r\n        break\r\n      case 3:\r\n        problem.answer = problem.op1 / problem.op2\r\n        problem.problem = `${problem.op1} / ${problem.op2} = `\r\n        break\r\n      case 0:\r\n      default:\r\n        problem.answer = problem.op1 + problem.op2\r\n        problem.problem = `${problem.op1} + ${problem.op2} = `\r\n    }\r\n\r\n    // remove unnecessary zeros\r\n    problem.answer = problem.answer.toFixed(3).replace(/\\.?0+$/, '')\r\n\r\n    // convert to cyrillic notation\r\n    if (options.inCyrillicNotation) {\r\n      problem.answer = toCyrillicNotation(problem.answer)\r\n      problem.problem = problem.problem.split(' ').map((el, i) => (i === 1) || (i === 3) ? el : toCyrillicNotation(el)).join(' ')\r\n    }\r\n\r\n    return problem\r\n  }\r\n  ///endregion SECONDARY FUNCTIONS ///\r\n\r\n\r\n  while (q--) {\r\n    problemsList[q] = generateProblem()\r\n  }\r\n\r\n\r\n  return problemsList\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {Problem} from \"./Problem\";\r\nimport s from './ProblemsViewer.module.sass'\r\nimport {problemsGenerator} from \"./problemsGenerator\";\r\nimport cn from \"../../utils/classNamesConcatenator\";\r\n\r\nexport const ProblemsViewer = ({localAppSettings, setOSK}) => {\r\n\r\n  /// STYLES ///\r\n  let btnColorTheme = localAppSettings.isColorThemeDark ? 'btn-outline-info' : 'btn-outline-secondary'\r\n\r\n  /// VARIABLES ///\r\n  let problemsOptions = {\r\n    quantity             : parseInt(localAppSettings.numberOfProblemsPerPage)\r\n    , minOperandValue    : parseInt(localAppSettings.minOperandValue)\r\n    , maxOperandValue    : parseInt(localAppSettings.maxOperandValue)\r\n    , useDecimalFractions: localAppSettings.useDecimalFractions\r\n    , useCommonFractions : localAppSettings.useCommonFractions\r\n    , useOperations      :\r\n    {\r\n        useAddition      : localAppSettings.useAddition\r\n      , useSubtraction   : localAppSettings.useSubtraction\r\n      , useMultiplication: localAppSettings.useMultiplication\r\n      , useDivision      : localAppSettings.useDivision\r\n    }\r\n    , inCyrillicNotation : localAppSettings.displayNumbersInCyrillicNotation\r\n  }\r\n\r\n  let [checkAnswer, toggleChekAnswer] = useState(false)\r\n  let [problemsList, genProblemsList] = useState(problemsGenerator(problemsOptions))\r\n\r\n  useEffect(() => {\r\n    genProblemsList(problemsGenerator(problemsOptions))\r\n  }, [localAppSettings])\r\n\r\n  /// HANDLERS ///\r\n  const handleNewProblemsClick = () => {\r\n    genProblemsList(problemsGenerator(problemsOptions))\r\n    toggleChekAnswer(false)\r\n  }\r\n\r\n  /// PAYLOAD ///\r\n  return (\r\n    <div style={{fontSize: (localAppSettings.problemsTextSize * 0.2 + 1) + 'em'}}>\r\n        <form className={s.flexContainer} >\r\n          {problemsList.map((problem, i) => {\r\n            return <Problem key={i} checkAnswer={checkAnswer} problem={problem} localAppSettings={localAppSettings} classList={s.flexItem}  setOSK={setOSK}/>\r\n            })\r\n          }\r\n      </form>\r\n      <div className={cn(s.flexContainer, s.paddingBottom)}>\r\n        <button onClick={handleNewProblemsClick} className={cn('btn', btnColorTheme, s.marginTop)}>Новые примеры</button>\r\n        {localAppSettings.inputsForTestAnswer ?\r\n          <button onClick={() => { toggleChekAnswer(!checkAnswer) }} className={cn('btn', btnColorTheme, s.marginTop)}>\r\n            {checkAnswer ? 'Не показывать' : 'Показать'} не правильные\r\n          </button>\r\n          : ''\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}","export const defaultAppSettings = {\r\n  minOperandValue                   : 0\r\n  , maxOperandValue                 : 50\r\n  , useAddition                     : true\r\n  , useSubtraction                  : true\r\n  , useMultiplication               : false\r\n  , useDivision                     : false\r\n  , groupByOperations               : false\r\n  , useDecimalFractions             : false\r\n  , useCommonFractions              : false\r\n  , showAnswerOnHover               : true\r\n  , inputsForTestAnswer             : false\r\n  , numberOfProblemsPerPage         : 10\r\n  , displayNumbersInCyrillicNotation: false\r\n  , isColorThemeDark                : true\r\n  , problemsTextSize                : 1\r\n  , appVersion                      : '0.1.5'\r\n}","import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class KeyboardButton extends PureComponent {\n\tstatic propTypes = {\n\t\tvalue: PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.node.isRequired]),\n\t\tclasses: PropTypes.string,\n\t\tonClick: PropTypes.func.isRequired,\n\t\tautofocus: PropTypes.bool,\n\t\tisDisabled: PropTypes.bool,\n\t};\n\n\tstatic defaultProps = {\n\t\tclasses: '',\n\t\tautofocus: false,\n\t\tisDisabled: false,\n\t};\n\n\thandleClick = () => this.props.onClick(this.props.value)\n\n\trender() {\n\t\treturn (\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\tclassName={`keyboard-button ${this.props.classes}`}\n\t\t\t\tonClick={this.props.isDisabled ? null : this.handleClick}\n\t\t\t\tautoFocus={this.props.autofocus}\n\t\t\t\tdisabled={this.props.isDisabled}\n\t\t\t>\n\t\t\t\t{this.props.value}\n\t\t\t</button>\n\t\t);\n\t}\n}\n","export default {\n\tsymbolsKeyValue: 'Abc',\n\tlayout: [\n\t\t['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n\t\t['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'],\n\t\t['z', 'x', 'c', 'v', 'b', 'n', 'm']\n\t]\n};\n","export default {\n\tsymbolsKeyValue: '.?!&',\n\tlayout: [\n\t\t['=', '+', '%', '*', '[', ']', '{', '}', '<', '>'],\n\t\t['@', ':', ';', '_', '-', '#', '(', ')', '/', '\\\\'],\n\t\t['.', ',', '&', '$', '?', '!', '\\'', '\"', '^'],\n\t]\n};\n","export default {\n\tsymbolsKeyValue: '123',\n\tlayout: [\n\t\t['1', '2', '3'],\n\t\t['4', '5', '6'],\n\t\t['7', '8', '9'],\n        [',', '0']\n\t]\n};\n","import React from 'react';\n\nconst BackspaceIcon = ({viewBox = '0 0 24 24', width = 24, height = 24, fill,}) =>\n\t<svg {...{width, height, fill, viewBox}}>\n\t\t<path fill=\"currentColor\" d=\"M22 3H7c-.69 0-1.23.35-1.59.88L0 12l5.41 8.11c.36.53.9.89 1.59.89h15c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-3 12.59L17.59 17 14 13.41 10.41 17 9 15.59 12.59 12 9 8.41 10.41 7 14 10.59 17.59 7 19 8.41 15.41 12 19 15.59z\" />\n\t</svg>\n;\n\nexport default BackspaceIcon;\n","import React from 'react';\n\nconst LanguageIcon = ({viewBox = '0 0 24 24', width = 24, height = 24, fill}) =>\n\t<svg {...{width, height, fill, viewBox}}>\n\t\t<path fill=\"currentColor\" d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zm6.93 6h-2.95c-.32-1.25-.78-2.45-1.38-3.56 1.84.63 3.37 1.91 4.33 3.56zM12 4.04c.83 1.2 1.48 2.53 1.91 3.96h-3.82c.43-1.43 1.08-2.76 1.91-3.96zM4.26 14C4.1 13.36 4 12.69 4 12s.1-1.36.26-2h3.38c-.08.66-.14 1.32-.14 2 0 .68.06 1.34.14 2H4.26zm.82 2h2.95c.32 1.25.78 2.45 1.38 3.56-1.84-.63-3.37-1.9-4.33-3.56zm2.95-8H5.08c.96-1.66 2.49-2.93 4.33-3.56C8.81 5.55 8.35 6.75 8.03 8zM12 19.96c-.83-1.2-1.48-2.53-1.91-3.96h3.82c-.43 1.43-1.08 2.76-1.91 3.96zM14.34 14H9.66c-.09-.66-.16-1.32-.16-2 0-.68.07-1.35.16-2h4.68c.09.65.16 1.32.16 2 0 .68-.07 1.34-.16 2zm.25 5.56c.6-1.11 1.06-2.31 1.38-3.56h2.95c-.96 1.65-2.49 2.93-4.33 3.56zM16.36 14c.08-.66.14-1.32.14-2 0-.68-.06-1.34-.14-2h3.38c.16.64.26 1.31.26 2s-.1 1.36-.26 2h-3.38z\" />\n\t</svg>\n;\n\nexport default LanguageIcon;\n","import React from 'react';\n\nconst ShiftIcon = ({viewBox = '0 0 32 32', width = 24, height = 24, fill}) =>\n\t<svg {...{width, height, fill, viewBox}}>\n\t\t<path fill=\"currentColor\" d=\"M21 28h-10c-0.552 0-1-0.448-1-1v-11h-4c-0.404 0-0.769-0.244-0.924-0.617s-0.069-0.804 0.217-1.090l10-10c0.391-0.39 1.024-0.39 1.414 0l10 10c0.286 0.286 0.372 0.716 0.217 1.090s-0.519 0.617-0.924 0.617h-4v11c0 0.552-0.448 1-1 1zM12 26h8v-11c0-0.552 0.448-1 1-1h2.586l-7.586-7.586-7.586 7.586h2.586c0.552 0 1 0.448 1 1v11z\" />\n\t</svg>\n;\n\nexport default ShiftIcon;\n","/**\n * This class and imports are copy from https://github.com/WiaczeslawP/react-screen-keyboard\n * */\n\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport KeyboardButton from './KeyboardButton';\n\nimport LatinLayout from './layouts/LatinLayout';\nimport CyrillicLayout from './layouts/CyrillicLayout';\nimport SymbolsLayout from './layouts/SymbolsLayout';\nimport NumericLayout from './layouts/NumericLayout';\n\nimport BackspaceIcon from './icons/BackspaceIcon';\nimport LanguageIcon from './icons/LanguageIcon';\nimport ShiftIcon from './icons/ShiftIcon';\n\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n\nexport default class Keyboard extends PureComponent {\n\tstatic propTypes = {\n\t\tleftButtons: PropTypes.arrayOf(PropTypes.node),\n\t\trightButtons: PropTypes.arrayOf(PropTypes.node),\n\t\tinputNode: PropTypes.any.isRequired,\n\t\tonClick: PropTypes.func,\n\t\tisFirstLetterUppercase: PropTypes.bool,\n\t\tisNumeric: PropTypes.bool,\n\t\tlayouts: PropTypes.arrayOf(PropTypes.shape({\n\t\t\tsymbolsKeyValue: PropTypes.string,\n\t\t\tlayout: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n\t\t})),\n\t};\n\n\tstatic defaultProps = {\n\t\tleftButtons: [],\n\t\trightButtons: [],\n\t\tisFirstLetterUppercase: false,\n\t\tisNumeric: false,\n\t\tlayouts: [CyrillicLayout, LatinLayout],\n\t};\n\n\tstate = {\n\t\tcurrentLayout: 0,\n\t\tshowSymbols: false,\n\t\tuppercase: this.isUppercase(),\n\t}\n\n\thandleLanguageClick = () => {\n\t\tthis.setState({\n\t\t\tcurrentLayout: (this.state.currentLayout + 1) % this.props.layouts.length,\n\t\t\tshowSymbols: false,\n\t\t});\n\n\t\tthis.props.inputNode.focus();\n\t}\n\n\thandleShiftClick = () => {\n\t\tthis.setState({uppercase: !this.state.uppercase});\n\n\t\tthis.props.inputNode.focus();\n\t}\n\n\thandleSymbolsClick = () => {\n\t\tthis.setState({showSymbols: !this.state.showSymbols});\n\n\t\tthis.props.inputNode.focus();\n\t}\n\n\thandleLetterButtonClick = (key) => {\n\t\tconst {inputNode} = this.props;\n\t\tconst {value, selectionStart, selectionEnd} = inputNode;\n\t\tconst nextValue = value.substring(0, selectionStart) + key + value.substring(selectionEnd);\n\n\t\tinputNode.value = nextValue;\n\t\tif (this.props.onClick) {\n\t\t\tthis.props.onClick(nextValue);\n\t\t}\n\t\tsetTimeout(() => {\n\t\t\tinputNode.focus();\n\t\t\tinputNode.setSelectionRange(selectionStart + 1, selectionStart + 1);\n\t\t}, 0);\n\t\tthis.setState({uppercase: this.isUppercase()});\n\t\tinputNode.dispatchEvent(new Event('input', {bubbles: true}));\n\t}\n\n\thandleBackspaceClick = () => {\n\t\tconst {inputNode} = this.props;\n\t\tconst {value, selectionStart, selectionEnd} = inputNode;\n\t\tlet nextValue;\n\t\tlet nextSelectionPosition;\n\t\tif (selectionStart === selectionEnd) {\n\t\t\tnextValue = value.substring(0, selectionStart - 1) + value.substring(selectionEnd);\n\t\t\tnextSelectionPosition = selectionStart - 1;\n\t\t} else {\n\t\t\tnextValue = value.substring(0, selectionStart) + value.substring(selectionEnd);\n\t\t\tnextSelectionPosition = selectionStart;\n\t\t}\n\t\tnextSelectionPosition = (nextSelectionPosition > 0) ? nextSelectionPosition : 0;\n\n\t\tinputNode.value = nextValue;\n\t\tif (this.props.onClick) {\n\t\t\tthis.props.onClick(nextValue);\n\t\t}\n\t\tsetTimeout(() => {\n\t\t\tinputNode.focus();\n\t\t\tinputNode.setSelectionRange(nextSelectionPosition, nextSelectionPosition);\n\t\t}, 0);\n\t\tthis.setState({uppercase: this.isUppercase()});\n\t\tinputNode.dispatchEvent(new Event('input', {bubbles: true}));\n\t}\n\n\tisUppercase() {\n\t\tconst {inputNode, isFirstLetterUppercase} = this.props;\n\t\treturn inputNode.type !== 'password' &&\n\t\t\tinputNode.dataset.type !== 'email' &&\n\t\t\t!inputNode.value.length && isFirstLetterUppercase;\n\t}\n\n\tgetKeys() {\n\t\tlet keysSet;\n\t\tif (this.state.showSymbols) {\n\t\t\tkeysSet = SymbolsLayout.layout;\n\t\t} else {\n\t\t\tkeysSet = this.props.layouts[this.state.currentLayout].layout;\n\t\t}\n\n\t\treturn this.state.uppercase ?\n\t\t\tkeysSet.map(keyRow => keyRow.map(key => key.toUpperCase()))\n\t\t\t: keysSet;\n\t}\n\n\tgetSymbolsKeyValue() {\n\t\tif (this.state.showSymbols) {\n\t\t\treturn this.props.layouts[this.state.currentLayout].symbolsKeyValue;\n\t\t}\n\t\treturn SymbolsLayout.symbolsKeyValue;\n\t}\n\n\trenderKeyRows() {\n\t\tconst keys = this.getKeys();\n\t\treturn keys.map((row, i) => \n\t\t\t<div className=\"keyboard-row\" key={`row-${i}`}>\n\t\t\t\t{i === keys.length - 1 &&\n\t\t\t\t\t<KeyboardButton\n\t\t\t\t\t\tvalue={<ShiftIcon />}\n\t\t\t\t\t\tclasses=\"keyboard-shiftButton\"\n\t\t\t\t\t\tonClick={this.handleShiftClick}\n\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t\t{row.map(button =>\n\t\t\t\t\t<KeyboardButton\n\t\t\t\t\t\tvalue={button}\n\t\t\t\t\t\tonClick={this.handleLetterButtonClick}\n\t\t\t\t\t\tkey={button}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{i === keys.length - 1 &&\n\t\t\t\t\t<KeyboardButton\n\t\t\t\t\t\tvalue={this.getSymbolsKeyValue()}\n\t\t\t\t\t\tclasses=\"keyboard-symbolButton\"\n\t\t\t\t\t\tonClick={this.handleSymbolsClick}\n\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n\n\trenderNumeric() {\n\t\tconst keys = NumericLayout.layout;\n\t\tconst {leftButtons, rightButtons} = this.props;\n\t\treturn (\n\t\t\t<div className=\"keyboard numeric-keyboard\">\n\t\t\t\t{keys.map((row, i) => \n\t\t\t\t\t<div className=\"keyboard-row\" key={`row-${i}`}>\n\t\t\t\t\t\t{row.map(button =>\n\t\t\t\t\t\t\t<KeyboardButton\n\t\t\t\t\t\t\t\tvalue={button}\n\t\t\t\t\t\t\t\tonClick={this.handleLetterButtonClick}\n\t\t\t\t\t\t\t\tkey={button}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{i === keys.length - 1 &&\n\t\t\t\t\t\t\t<KeyboardButton\n\t\t\t\t\t\t\t\tvalue={<BackspaceIcon />}\n\t\t\t\t\t\t\t\tclasses=\"keyboard-backspaceButton\"\n\t\t\t\t\t\t\t\tonClick={this.handleBackspaceClick}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<div className=\"keyboard-row\">\n\t\t\t\t\t{leftButtons}\n\t\t\t\t\t{rightButtons}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trenderAlphanumeric() {\n\t\tconst {leftButtons, rightButtons, inputNode} = this.props;\n\t\treturn (\n\t\t\t<div className=\"keyboard\">\n\t\t\t\t<div className=\"keyboard-row\">\n\t\t\t\t\t{numbers.map(button =>\n\t\t\t\t\t\t<KeyboardButton\n\t\t\t\t\t\t\tvalue={button}\n\t\t\t\t\t\t\tonClick={this.handleLetterButtonClick}\n\t\t\t\t\t\t\tclasses=\"keyboard-numberButton\"\n\t\t\t\t\t\t\tkey={button}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t\t<KeyboardButton\n\t\t\t\t\t\tvalue={<BackspaceIcon />}\n\t\t\t\t\t\tclasses=\"keyboard-backspaceButton\"\n\t\t\t\t\t\tonClick={this.handleBackspaceClick}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{this.renderKeyRows()}\n\t\t\t\t<div className=\"keyboard-row\">\n\t\t\t\t\t{leftButtons}\n\t\t\t\t\t{this.props.layouts.length > 1 ?\n\t\t\t\t\t\t<KeyboardButton\n\t\t\t\t\t\t\tvalue={<LanguageIcon />}\n\t\t\t\t\t\t\tclasses=\"keyboard-languageButton\"\n\t\t\t\t\t\t\tonClick={this.handleLanguageClick}\n\t\t\t\t\t\t/>\n\t\t\t\t\t: null}\n\t\t\t\t\t{inputNode.dataset.type === 'email' ?\n\t\t\t\t\t\t<KeyboardButton\n\t\t\t\t\t\t\tvalue={'@'}\n\t\t\t\t\t\t\tclasses=\"keyboard-atButton\"\n\t\t\t\t\t\t\tonClick={this.handleLetterButtonClick}\n\t\t\t\t\t\t/>\n\t\t\t\t\t: null}\n\t\t\t\t\t<KeyboardButton\n\t\t\t\t\t\tvalue={' '}\n\t\t\t\t\t\tclasses=\"keyboard-spaceButton\"\n\t\t\t\t\t\tonClick={this.handleLetterButtonClick}\n\t\t\t\t\t/>\n\t\t\t\t\t{inputNode.dataset.type === 'email' ?\n\t\t\t\t\t\t<KeyboardButton\n\t\t\t\t\t\t\tvalue={'.'}\n\t\t\t\t\t\t\tclasses=\"keyboard-fullstopButton\"\n\t\t\t\t\t\t\tonClick={this.handleLetterButtonClick}\n\t\t\t\t\t\t/>\n\t\t\t\t\t: null}\n\t\t\t\t\t{rightButtons}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trender() {\n\t\tif (!this.props.inputNode) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.props.isNumeric ? this.renderNumeric() : this.renderAlphanumeric();\n\t}\n}","export default {\n\tsymbolsKeyValue: 'Абв',\n\tlayout: [\n\t\t['й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х', 'ъ'],\n\t\t['ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э'],\n\t\t['я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю'],\n\t]\n};\n","import React from 'react';\r\nimport CyrillicNumbersLayout from \"./src/layouts/CyrillicNumbersLayout\";\r\nimport Keyboard from \"./src/Keyboard\";\r\nimport KeyboardButton from \"./src/KeyboardButton\";\r\nimport BackspaceIcon from \"./src/icons/BackspaceIcon\";\r\nimport './CyrillicNumericKeyboard.sass'\r\n\r\nclass CyrillicNumbersKeyboard extends Keyboard {\r\n\r\n  isUppercase () {return null}\r\n\r\n  renderCyrillicNumber () {\r\n    const keys = CyrillicNumbersLayout.layout;\r\n    const {leftButtons, rightButtons} = this.props;\r\n\r\n\r\n    return (\r\n      <div className=\"keyboard cyrillic-numeric-keyboard\" onClick={e => e.stopPropagation()}>\r\n        {keys.map((row, i) =>\r\n          <div className=\"keyboard-row\" key={`row-${i}`}>\r\n            {row.map(button =>\r\n              <KeyboardButton\r\n                value={button}\r\n                onClick={this.handleLetterButtonClick}\r\n                key={button}\r\n              />\r\n            )}\r\n            {i === keys.length - 1 &&\r\n            <KeyboardButton\r\n              value={<BackspaceIcon />}\r\n              classes=\"keyboard-backspaceButton\"\r\n              onClick={this.handleBackspaceClick}\r\n            />\r\n            }\r\n          </div>\r\n        )}\r\n        <div className=\"keyboard-row\">\r\n          {leftButtons}\r\n          {rightButtons}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.inputNode) {\r\n      return null;\r\n    }\r\n\r\n    if (this.props.isNumeric) {\r\n      return this.renderNumeric()\r\n    }\r\n\r\n    if (this.props.isCyrillicNumbers) {\r\n      return  this.renderCyrillicNumber()\r\n    }\r\n\r\n    return this.renderAlphanumeric();\r\n  }\r\n}\r\n\r\nexport default CyrillicNumbersKeyboard;\r\n\r\n","import React, {useEffect, useState} from 'react';\nimport {Settings, SettingsButton} from \"./components/Settings/Settings\";\nimport {ProblemsViewer} from \"./components/ProblemsViewer/ProblemsViewer\";\nimport './App.scss'\nimport {defaultAppSettings} from \"./constantsAndDefaults\";\nimport {isAppVersionLess} from \"./utils/isAppVersionLess\";\nimport CyrillicNumbersKeyboard from \"./components/Keyboard/CyrillicNumbersKeyboard\";\n\nfunction App() {\n\n  let [localAppSettings, setLocalAppSettings] = useState(JSON.parse(localStorage.getItem('simple-math-problems-settings')) || defaultAppSettings )\n\n  if (!localAppSettings.appVersion || isAppVersionLess(localAppSettings.appVersion, defaultAppSettings.appVersion) ) {\n    setLocalAppSettings(defaultAppSettings)\n  }\n\n  useEffect(()=>{\n    localStorage.setItem('simple-math-problems-settings', JSON.stringify(localAppSettings))\n    }, [localAppSettings])\n\n\n  let currentColorTheme = localAppSettings.isColorThemeDark ? 'bg-dark text-info' : 'bg-light text-dark'\n\n  // on screen keyboard\n  const [OSK, setOSK] = useState({showOSK: false, inputNode: null})\n\n  function handleClick(evt) {\n    if (!evt.target.closest('.keyboard') && evt.target.tagName !== 'INPUT'){\n      setOSK({showOSK: false, inputNode: null})\n    }\n  }\n\n  return (\n    <div className={'container' + ' ' + currentColorTheme}\n      onClick={handleClick}\n    >\n      <header className={'header'}>\n        <h1>Тренировка арифметики</h1>\n        <SettingsButton localAppSettings={localAppSettings} />\n      </header>\n      <Settings localAppSettings={localAppSettings} setLocalAppSettings={setLocalAppSettings} />\n      <ProblemsViewer localAppSettings={localAppSettings} setOSK={setOSK} />\n      { localAppSettings.displayNumbersInCyrillicNotation\n        && OSK.showOSK\n        && <CyrillicNumbersKeyboard inputNode={OSK.inputNode}  isCyrillicNumbers={true} /> }\n    </div>\n  );\n}\n\nexport default App;\n","\r\nexport const isAppVersionLess = (versionFromStore, versionFromDefaults) => {\r\n  versionFromDefaults = versionFromDefaults.split('.').map(el => parseInt(el))\r\n  versionFromStore = versionFromStore.split('.').map(el => parseInt(el))\r\n\r\n  if (versionFromStore[0] < versionFromDefaults[0] ||\r\n    versionFromStore[1] < versionFromDefaults[1] ||\r\n    versionFromStore[2] < versionFromDefaults[2]) {\r\n    return true\r\n  }\r\n\r\n  return false\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}